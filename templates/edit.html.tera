<!doctype html>
<html>
<head>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@json-editor/json-editor@latest/dist/css/jsoneditor.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/spectre.css@latest/dist/spectre.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/spectre.css@latest/dist/spectre-exp.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@json-editor/json-editor@latest/dist/jsoneditor.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script src="/public/js/njs.min.js"></script>
<script src="/public/js/common.js"></script>
<style>
div[data-schematype="array"] {
    border-top: 2px solid black;
    margin-top: 2rem;
    padding-top: 1rem;
}
div[data-schematype="object"] {
    border-top: 2px solid black;
    margin-bottom: 3rem;
    padding-top: 0.5rem;
}
body { margin: 1rem; }
</style>
</head>
<body>
<div class="editor"></div>
<button id="post">Save this poll</button>
<script type="text/javascript">
const blockFn = (block) => block + '\n';
const inlineFn = (text) => text;
const newlineFn = () => '\n';
const emptyFn = () => '';
const renderer = {
    // Block elements
    code: blockFn,
    blockquote: blockFn,
    html: (text) => new DOMParser().parseFromString(text, 'text/html').body.textContent,
    heading: blockFn,
    hr: emptyFn,
    list: blockFn,
    listitem: (text) => blockFn(text),
    paragraph: blockFn,
    table: (header, body) => blockFn(header) + blockFn(body),
    tablerow: blockFn,
    tablecell: blockFn,
    // Inline elements
    strong: inlineFn,
    em: inlineFn,
    codespan: inlineFn,
    br: newlineFn,
    del: inlineFn,
    link: (_0, _1, text) => inlineFn(text),
    image: (_0, _2, text) => inlineFn(text),
    text: inlineFn,
};
function markdownToTxt(markdown, options = {
    gfm: true,
    pedantic: false,
}) {
    if (markdown) {
        const unmarked = marked(markdown, {
            gfm: options.gfm,
            pedantic: options.pedantic,
            renderer: renderer,
        });
        return unmarked;
    }
    return '';
}
</script>
<script type="text/javascript">
    var poll = {{poll|safe}};
    var voters = {{voters|safe}};
    var editor = {};
    var extracted = {};

    function isLikelyMarkdown(txt) {
        var conv = markdownToTxt(txt);
        return conv.length < txt.length;
    }

    function redirect() {
        window.location = "/admin";
    }

    function errorPosting(e) {
        alert('Failed to post form: '+ e);
    }


    ajax("/public/js/poll_form_schema.json", loadEditor, ignore, {});
    function loadEditor(data) {
        var schema = JSON.parse(data);
        // Fix possible participants here
        schema.properties.allowed_participant.items.enum = Object.keys(voters);
        schema.properties.allowed_participant.items.options.enum_titles = Object.keys(voters).map(k => voters[k].fullname)
        // Fix poll information we don't allow editing
        
        if ("desc_markdown" in poll) {
            extracted.desc_markdown = poll.desc_markdown;
            delete poll.desc_markdown;
        }
        extracted.choices = new Array(poll.choices.length);
        for (var i = 0; i < poll.choices.length; i++) {
            if ("desc_markdown" in poll.choices[i]) {
                delete poll.choices[i].desc_markdown;
            }
            if ("vote" in poll.choices[i]) {
                extracted.choices[i] = { vote: poll.choices[i].vote.slice(0) };
                delete poll.choices[i].vote;
            }
            if ("voter" in poll.choices[i]) {
                extracted.choices[i].voter = poll.choices[i].voter.slice(0);
                delete poll.choices[i].voter;
            }
        }

        editor = new JSONEditor($('.editor').a[0], { 
            disable_edit_json: true, 
            disable_collapse: true, 
            disable_properties: true,
            disable_array_reorder: true, 
            no_additional_properties: true,
            schema: schema, startval: poll, 
            theme: "spectre", iconlib: "fontawesome4" });
    }
    $('#post').on('click', function(e) {
        // Need to restore extracted value if it makes sense
        var newPoll = editor.getValue();
        if ("description" in newPoll && isLikelyMarkdown(newPoll.description)) {
            newPoll.desc_markdown = newPoll.description;
            delete newPoll.description;
        }
        // Then fix choices & votes
        if (newPoll.choices.length >= extracted.choices.length) {
            // Need to restore votes 
            for (var i = 0; i < extracted.choices.length; i++) {
                newPoll.choices[i].vote = extracted.choices[i].vote;
                newPoll.choices[i].voter = extracted.choices[i].voter;
            }
        }

        for (var i = 0; i < newPoll.choices.length; i++) {
            if ("description" in newPoll.choices[i] && isLikelyMarkdown(newPoll.choices[i].description)) {
                newPoll.choices[i].desc_markdown = newPoll.choices[i].description;
                delete newPoll.choices[i].description;
            }
        }

        // Ok, should be ok to send for saving
        var formData = `new_poll_filename=${encodeURIComponent(newPoll.filename)}&new_poll_name=${encodeURIComponent(JSON.stringify(newPoll))}`;
        ajax('/edit', redirect, errorPosting, { method: 'POST', formData: formData });
    });
</script>
</body>
</html>